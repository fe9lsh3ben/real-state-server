// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:1@localhost:5432/real_estate?schema=public"
}

// run prisma generate


// Define the Role table

// Define the Permission table


//_________________________________________ Real Estate Concept Modules ________________________________________//


////________ Enums Module__________//

enum UserType {
  ADMIN
  OFFICE_OWNER
  BENEFICIARY
  BUSINESS_BENEFICIARY //Develope for this BUSINESS_BENEFICIARY
  GOVERMENTAL
  OTHER
	@@map("UserType")
}

enum OfficeStatus {     //Develope in server app previelage
  ACTIVE
  UNACTIVE
  TEMP_UNACTIVE
  RESTRICTED
  BANNED
}

enum RealStateUnitType {
  LAND
  BAUILDING
  VILLA
  STORE
  AGRICULTURAL
  OTHER
	@@map("RealStateType")
}

enum InitiatorRelation { // The initiator of the Real Estate in the platform
    OWNER
    REPRESNTATIVE
    OFFICE
}

enum StaffStatus {
    ACTIVE
    UNACTIVE
}


//________ Models Module__________//



// Define the Session table
model Session {
  ID        Int      @id @default(autoincrement())
  UserId    Int      @unique
  User      User     @relation(fields: [UserId], references: [ID])
  Token     String   @unique
  ExpiresAt DateTime
}

// Define the Setting table
model Setting {
  ID    Int    @id @default(autoincrement())
  Name  String @unique
  Value String
}

// Define the AuditTrail table
model AuditTrail {
  ID          Int      @id @default(autoincrement())
  UserId      Int?
  Action      String
  Description String?
  CreatedAt   DateTime @default(now())
}

// Define the User table
model User {
  Role              UserType           @default(BENEFICIARY)
  ID                Int                @id @default(autoincrement())
  CreatedAt         DateTime           @default(now())
  UpdatedAt         DateTime           @updatedAt
  TermsCondetion_ID String
  Username          String             @unique
  Email             String             @unique
  Session           Session?
  ProfileImage      Bytes?
  GovID             String?            @unique
  Address           Json        //{Destrect, altitude, Longtude}
  FullName          String[]
  UserPhone         String
  BrokerLicense     String?
  FalLicense        String?
  Other1            Json[]      // Admin={Log_records}, OfficeOwner/Staff{Broker_License}, Beneficiary={Beneficiary_class}, Govermental={Other}
  RE_Office         RealEstateOffice[]
  Balance           Decimal?
}

model RealEstateOffice {
  ID                  Int              @id @default(autoincrement())
  CommercialRegister  String
  OwnerID             Int              @unique
  Owner               User             @relation(fields: [OwnerID], references: [ID])
  Region              String
  City                String
  Address             Json //{Destrect, altitude, Longtude}
  Status              OfficeStatus
  Staff               OfficeStaff[]
  RealStateUnits      RealEstateUnit[] @relation("OfficeAndREUnitRelation")
  Contracts           Contract[]
  ADs                 RealEStateAD[]
  Bargains            Bargain[]
  Visitors            Int
  Balance             Decimal
  CreatedAt           DateTime
  UpdatedAt           DateTime
  TearmsAndAgreements Boolean
}

model RealEstateUnit {
  ID                   Int                @id @default(autoincrement())
  UnitType             RealStateUnitType
  DeedNumber           String             @unique
  DeedDate             DateTime
  DeedOwner            Json[] //{Owner number, Owner Identity}
  RealEstateOffice     RealEstateOffice[] @relation("OfficeAndREUnitRelation")
  InitiatedBy          String
  InitiatorID          String
  InitiatorRelation    InitiatorRelation
  CreatorContactNumber String
  Region               String
  City                 String
  Address              Json   //{Destrect,Altitude,Longtude}
  UnitImage            Bytes[]
  CreatedAt            DateTime
  UpdatedAt            DateTime
  Description          Json[] //Based on Unit type
  UnitAD               RealEStateAD?
  TermsAndAgreements   Boolean
}

model Contract {
  ID                Int              @id //Parties ID +D&T
  InitiatorOffice   Int              
  Office            RealEstateOffice @relation(fields: [InitiatorOffice], references: [ID])
  PartiesConsent    Json[]    //{Name,ID,SignatureOTP}
  Contant           String
  PartiesPhone      Json[]   
  Other             Json[]
  CreatedAt         DateTime
  UpdatedAt         DateTime
  TermsAndCondetion Json[]
}

model Bargain {
  ID                Int              @id //Parties ID +D&T
  InitiatorOffice   Int              
  Office            RealEstateOffice @relation(fields: [InitiatorOffice], references: [ID])
  PartiesConsent    Json[]    //{Name,ID,SignatureOTP}
  Contant           String
  PartiesPhone      Json[]   
  Other             Json[]
  CreatedAt         DateTime
  UpdatedAt         DateTime
  TermsAndCondetion Json[]
}

model OfficeStaff {
  ID             Int              @id @default(autoincrement())
  GovID          String
  BrokageLicense String
  StaffRecords   Json[] //{office_name, join_date, end_of_service_date}
  OfficeID       Int?
  Office         RealEstateOffice? @relation(fields: [OfficeID], references: [ID])
}

model RealEStateAD {
  ID                 Int              @id @default(autoincrement())
  AD_Maker           Int              @unique
  MakerRelation      RealEstateOffice @relation(fields: [AD_Maker], references: [ID])
  AD_License         String
  CreatedAt          DateTime
  UpdatedAt          DateTime
  RealEstate         Int @unique
  RealEstateRelation RealEstateUnit @relation(fields: [RealEstate], references: [ID])
  Content            Json   //{Type,Descriptio}
  Expiry             DateTime
  TermsAndCondetion  Json

}
