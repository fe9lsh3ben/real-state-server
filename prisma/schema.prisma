// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:1@localhost:5432/real_estate?schema=public"
}

// run prisma generate


// Define the Role table

// Define the Permission table


//_________________________________________ Real Estate Concept Modules ________________________________________//


////________ Enums Module__________//

enum UserType {
  ADMIN
  REAL_ESTATE_OFFICE_OWNER
  REAL_ESTATE_OFFICE_STAFF
  BENEFICIARY
  BUSINESS_BENEFICIARY //Develope for this BUSINESS_BENEFICIARY
  GOVERMENTAL_AGENT
  OTHER
	@@map("UserType")
}

enum OfficeOrUserStatus {     //Develope in server app previelage
  IN_HOLD
  ACTIVE
  UNACTIVE
  TEMP_UNACTIVE
  RESTRICTED
  BANNED
}

enum RealEstateUnitType {
  LAND
  BAUILDING
  APARTMENT
  VILLA
  STORE
  AGRICULTURAL
  STORAGE
  OFFICE
  EXHIBITION
  OTHER
	@@map("RealEstateType")
}




enum Committed_By {
    OFFICE_OWNER
    OFFICE_STAFF
    BENEFICIARY //(Normal user)
    BUSINESS_BENEFICIARY

}
//________ Models Module__________//



// Define the Session table
model Session {
  ID        Int      @id @default(autoincrement())
  UserId    Int      @unique
  User      User     @relation(fields: [UserId], references: [ID])
  Token     String   @unique
  ExpiresAt DateTime
}

// Define the Setting table
model Setting {
  ID    Int    @id @default(autoincrement())
  Name  String @unique
  Value String
}

// Define the AuditTrail table
model AuditTrail {
  ID          Int      @id @default(autoincrement())
  UserId      Int?
  Action      String
  Description String?
  CreatedAt   DateTime @default(now())
}

model TermsAndCondetions {
    ID          String     @id
    CreatedAt   DateTime   @default(now())
    Contetn     Json[]
    Other       Json[]
    commetedBy  Committed_By
    Users       User[]
    MadeBy      String

}

// Define the User table
model User {
  Role              UserType           @default(BENEFICIARY)
  ID                Int                @id @default(autoincrement())
  CreatedAt         DateTime           @default(now())
  UpdatedAt         DateTime           @updatedAt
  TermsCondetionID  String
  TermsCondetion    TermsAndCondetions  @relation(fields: [TermsCondetionID], references: [ID])

  //___

  Username          String             @unique
  Email             String             @unique
  Session           Session?
  ProfileImage      Bytes?
  GovID             String             @unique
  Address           Json        //{Region, City, Destrect, altitude, Longtude}
  FullName          String[]
  UserPhone         String
  //___

  Other1            Json[]      // Admin={Log_records}, Beneficiary={Beneficiary_class}, Govermental={Other}, Office_Staff{BelongToOffice}
  
  RE_Offices        RealEstateOffice[] @relation(name: "Owner")
  
  Employer_REO_ID   Int?
  Employer_REO      RealEstateOffice?  @relation(name: "OfficeStaff", fields: [Employer_REO_ID], references: [ID])
  
  FalLicense        String?
  Balance           Decimal?
  UserStatus        OfficeOrUserStatus
}

model RealEstateOffice {
  ID                  Int              @id @default(autoincrement())
  CommercialRegister  String
  OwnerID             Int              @unique
  Owner               User             @relation(name: "Owner",fields: [OwnerID], references: [ID])
  Address             Json  //{Region, City, Destrect, altitude, Longtude}
  Status              OfficeOrUserStatus
 
  Staff               User[]           @relation("OfficeStaff")
 
  RealStateUnits      RealEstateUnit[] @relation("OfficeAndREUnit")
  Contracts           Contract[]
  ADs                 RealEStateAD[]
  Visitors            Json //{date : number of visitors}
  
  Balance             Decimal          @default(0.0)
  CreatedAt           DateTime         @default(now())
  UpdatedAt           DateTime         @updatedAt
}

model RealEstateUnit {
  ID                   Int                @id @default(autoincrement())
  UnitType             RealEstateUnitType
  DeedNumber           String             @unique
  DeedDate             DateTime
  DeedOwners            Json[] //{Owner number, Owner Identity Number, Owner name}
  
  AffiliatedOfficeID   Int?
  AffiliatedOffice     RealEstateOffice? @relation("OfficeAndREUnit", fields: [AffiliatedOfficeID], references: [ID])

  Initiator            Json //{type (office/owner by platform), id, name, contact_id_number}
  
  Address              Json   //{Ragion, City, Destrect, Altitude, Longtude}
  UnitImages           Bytes[]
  CreatedAt            DateTime           @default(now())
  UpdatedAt            DateTime           @updatedAt
  
  Specifications       Json[] //Based on Unit type *Refare at the end of this page.
  UnitAD               RealEStateAD?
}

model Contract {
  ID                Int              @id @default(autoincrement()) //D&T
  InitiatorOffice   Int           
  Office            RealEstateOffice @relation(fields: [InitiatorOffice], references: [ID])
  PartiesConsent    Json[]    //{GOV ID,Name, SignatureOTP, Phone Number}
  Contant           Json      //{content, contract terms}   
  Other             Json[]
  CreatedAt         DateTime         @default(now())
  UpdatedAt         DateTime         @updatedAt

}


model RealEStateAD {
  ID                 Int              @id @default(autoincrement())
  AD_Initiator       Int              @unique
  Initiator          RealEstateOffice @relation(fields: [AD_Initiator], references: [ID])
  AD_License         String
  CreatedAt          DateTime         @default(now())
  UpdatedAt          DateTime         @updatedAt

  RealEstate_ID      Int              @unique
  RealEstate         RealEstateUnit   @relation(fields: [RealEstate_ID], references: [ID])
  Ad_Content         Json   //{Type of estate,Description, Price, Other}
  AD_StartedAt       DateTime
  AD_Expiry          DateTime
  Hedden             Boolean
  
}


///Real Estate unit specifications feild in JSON: -

/// LAND : {Area, shape, Y-sides, X-sides}
/// BUILDING : {Floors, apartments, avg_rooms, avg_toilets, stores, elevator, parking}
/// APARTMENT : {Rooms, Toilets, elevator}
/// VILLA : {Duplex, Floors, Rooms, Toilets, Parking}
/// STORE : {Area}
/// AGRICULTURAL : {Area}
/// STORAGE : {Area}
/// OFFICE : {Area}
/// EXHIBITION : {Area}